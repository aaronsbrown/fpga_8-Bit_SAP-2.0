 I'd like to make a testbench for a CPU microinstruction more robust.


 INSTRUCTION_NAME: XRI
 TESTBENCH_FILE: hardware/test/instruction_set/to_convert/XRI_tb.sv
 ASM_FILE: software/asm/src/XRI.asm â€” or, we might need to create one from scratch!

  Please enhance both the assembly program and testbench following these patterns:

  **Assembly Program Enhancements:**
  - Read ISA documentation thouroughly: docs/hardware/0_ISA.md
  - Include bit pattern variations (all zeros, all ones, alternating patterns, single bits)
  - Test flag behavior scenarios (zero results, negative results, carry interactions)
  - Add register preservation tests to ensure uninvolved registers aren't corrupted
  - Include detailed comments explaining the expected results for each test case

  **Testbench Improvements:**
  - Remove irrelevant signals (like UART) that aren't needed for microinstruction testing
  - Organize tests into clear, numbered sections with descriptive headers
  - Add systematic verification of register values and flag states after each operation
  - Include bit-level explanations in test output (e.g., "$AA & $55 = $00")
  - Use descriptive assertion messages that explain what each check validates
  - Increase timeout values appropriately for the expanded test suite
  - Ensure proper halt verification at the end

  **Key Requirements:**
  - Focus purely on the microinstruction functionality
  - Test both normal operation and edge cases
  - Verify all relevant CPU flags (Zero, Negative, Carry)
  - Confirm register preservation for uninvolved registers
  - Provide clear pass/fail feedback with explanatory messages
  - When updating a testbench, to support correct function of 'run_tests.py', the final log statement *must* be: 
    $display("LDA_I test finished.===========================\n\n");
  
  IMPORTANT: Before making any code changes, create a feature branch per CLAUDE.md workflow requirements.
  IMPORTANT: Declaring logic variables inside an initial block (or any procedural block) is not allowed in
  SystemVerilog. Instead, declare logic variables at the module level.
  IMPORTANT: Continuous integration demands the following: test benches and related assembly files *must* have the same core file name.
  For example: ADD_B.asm & ADD_B_tb.sv; sta_mmio_integration.asm and sta_mmio_integration_tb.sv
  IMPORTANT: Strong example test files include: XRA_B, ORA_B
  IMPORTANT: Aim for 12-15 tests, unless instruction complexity requires more.

  Please first analyze the current implementation, then enhance both files and regenerate the test
  fixtures. Run the test to verify all improvements work correctly.

  **Implementation Steps:**
  1. After enhancing the assembly file, regenerate test fixtures with:
     ```bash
     python3 software/assembler/src/assembler.py software/asm/src/[ASM_FILE].asm
  hardware/test/_fixtures_generated/[INSTRUCTION_NAME]/ --region ROM 0xF000 0xFFFF

  2. Run the enhanced testbench with:
  ./scripts/simulate.sh --tb hardware/test/instruction_set/[TESTBENCH_FILE].sv --verbose --no-viz

  