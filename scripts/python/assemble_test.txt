========================================================
README: Test Management and Assembly Script (assemble_test.py)
(Simplified Version - Assumes Assembler Outputs Sparse Hex)
========================================================

Purpose:
--------
This script automates various tasks related to setting up, cleaning, and
assembling test cases for the FPGA_8-Bit_SAP2 project. It interfaces
with the custom assembler (software/assembler/src/assembler.py) to
generate .hex fixture files (in a sparse format with @ADDR suitable for simulation).

Features:
---------
- Initialize New Tests: Creates new .asm (assembly source) and .sv
  (SystemVerilog testbench) files from predefined templates.
- Assemble Single Test: Assembles a specified .asm file to produce .hex
  output for simulation fixtures.
- Batch Assemble: Assembles all .asm files found in the source directory
  (software/asm/src/).
- Clean Test Artifacts: Removes generated .asm, .sv, and fixture files
  for a specified test.
- Custom Assembler Arguments: Allows passing additional arguments to the
  assembler via a string.
- Dry Run Mode: Shows what actions would be performed without making any
  actual changes or running commands.

File and Directory Structure (Assumed):
---------------------------------------
The script relies on a specific project directory structure:
- Project Root:
  - scripts/python/assemble_test.py (this script)
  - software/assembler/src/assembler.py (the assembler)
  - software/asm/src/ (directory for .asm source files)
  - software/asm/templates/test_template.asm (template for new .asm)
  - hardware/test/ (base directory for testbenches)
    - hardware/test/instruction_set/
    - hardware/test/cpu_control/
    - hardware/test/modules/
    - hardware/test/templates/test_template.sv (template for new .sv)
  - hardware/test/fixtures_generated/ (base for generated .hex files)

Usage:
------
python scripts/python/assemble_test.py [MODE] [OPTIONS]

Modes (Mutually Exclusive - one is required):
---------------------------------------------
* --test-name <name>
  Specifies the name of a single test to operate on (e.g., ADD_B).
  Used with --init, --clean, or for single assembly.

* --batch-assemble-all
  Ignores --test-name and attempts to assemble all .asm files in
  software/asm/src/.

Options:
--------
* --sub-dir {instruction_set|cpu_control|modules}
  Subdirectory within 'hardware/test/' for the .sv testbench.
  Required if using --init or --clean with --test-name.

* --init
  Initialize a new test (.asm, .sv, fixture dir, then assembles).
  Requires --test-name and --sub-dir.

* --force
  Used with --init. Overwrites existing .asm or .sv files.

* --clean
  Removes generated files for --test-name.
  Requires --test-name and --sub-dir. Prompts for confirmation.

* --asm-args "<arguments_string>"
  A string containing additional arguments to pass directly to
  software/assembler/src/assembler.py.
  Example: --asm-args "--region RAM 0000 1FFF"
  If --region is not specified within this string, the script defaults to
  passing "--region ROM F000 FFFF" to the assembler.
  Default: "" (empty string)

* --dry-run
  Show actions without execution.

Examples:
---------
1. Initialize a new instruction test named 'SUB_C':
   python scripts/python/assemble_test.py --test-name SUB_C --sub-dir instruction_set --init
   (This will assemble SUB_C.asm, outputting sparse hex by default to the fixture directory)

2. Assemble an existing test 'fpga_led_test.asm':
   python scripts/python/assemble_test.py --test-name fpga_led_test

3. Assemble 'fpga_led_test.asm' specifying a different output region via --asm-args:
   python scripts/python/assemble_test.py --test-name fpga_led_test --asm-args "--region VRAM D000 DFFF"

4. Clean artifacts for test 'ADC_B':
   python scripts/python/assemble_test.py --test-name ADC_B --sub-dir instruction_set --clean

5. Batch assemble all .asm files in software/asm/src/:
   python scripts/python/assemble_test.py --batch-assemble-all

6. Dry run of initializing a test:
   python scripts/python/assemble_test.py --test-name NEW_TEST --sub-dir cpu_control --init --dry-run

Notes:
------
- Assumes script is run from project root or PROJECT_ROOT is correctly set.
- Template files should contain '<<test_name>>' placeholder.
- The assembler (software/assembler/src/assembler.py) must be executable and
  is expected to output sparse hex files with @ADDR directives by default.