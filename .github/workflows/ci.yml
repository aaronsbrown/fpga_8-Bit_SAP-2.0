name: Verilog CI Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  run-verilog-tests:
    name: Run Verilog Simulation Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Icarus Verilog, sv2v, and unzip
        run: |
          sudo apt-get update -y
          sudo apt-get install -y iverilog curl unzip
          # sv2v installation (corrected path)
          SV2V_VERSION="v0.0.13"
          SV2V_ZIP_NAME="sv2v-Linux.zip"
          SV2V_ASSET_URL="https://github.com/zachjs/sv2v/releases/download/${SV2V_VERSION}/${SV2V_ZIP_NAME}"
          echo "Downloading sv2v ${SV2V_VERSION} zip from ${SV2V_ASSET_URL}..."
          curl -L "${SV2V_ASSET_URL}" -o /tmp/sv2v.zip
          echo "Unzipping sv2v..."
          mkdir -p /tmp/sv2v_extracted
          unzip -q /tmp/sv2v.zip -d /tmp/sv2v_extracted
          SV2V_BINARY_PATH="/tmp/sv2v_extracted/sv2v-Linux/sv2v"
          if [ -f "${SV2V_BINARY_PATH}" ]; then
              echo "sv2v binary found at ${SV2V_BINARY_PATH}"
              sudo mv "${SV2V_BINARY_PATH}" /usr/local/bin/sv2v
              sudo chmod +x /usr/local/bin/sv2v
              echo "sv2v installation complete. Version:"; sv2v --version
          else
              echo "ERROR: sv2v binary not found at ${SV2V_BINARY_PATH}."; ls -lR /tmp/sv2v_extracted; exit 1
          fi
          rm /tmp/sv2v.zip; rm -rf /tmp/sv2v_extracted

      - name: Make scripts executable
        run: |
          chmod +x scripts/python/run_tests.py
          chmod +x scripts/python/assemble_test.py
          chmod +x software/assembler/src/assembler.py # If assemble_test calls it

      # NEW STEP: Generate .hex fixtures for all tests
      - name: Generate Test Fixtures (.hex files)
        run: |
          echo "Generating .hex files for ISA tests..."
          find hardware/test/instruction_set -name '*_tb.sv' -print0 | while IFS= read -r -d $'\0' tb_file; do
            test_name=$(basename "${tb_file}" _tb.sv)
            echo "Assembling for: ${test_name}"
            python3 scripts/python/assemble_test.py "${test_name}" --sub-dir instruction_set 
            # No --init needed here if .asm files are already in software/asm/src/
            # If .asm files are also generated from template by assemble_test.py, 
            # you might need --init for the *first ever run* or if they are not in git.
            # For CI, typically .asm files are committed, and we just assemble them.
          done
          
          echo "Generating .hex files for CPU Control tests..."
          find hardware/test/cpu_control -name '*_tb.sv' -print0 | while IFS= read -r -d $'\0' tb_file; do
            test_name=$(basename "${tb_file}" _tb.sv)
            echo "Assembling for: ${test_name}"
            python3 scripts/python/assemble_test.py "${test_name}" --sub-dir cpu_control
          done

          echo "Generating .hex files for Module tests (if any need .asm fixtures)..."
          # Many module tests might not use .asm fixtures, but if some do:
          find hardware/test/modules -name '*_tb.sv' -print0 | while IFS= read -r -d $'\0' tb_file; do
            test_name=$(basename "${tb_file}" _tb.sv)
            # Check if an ASM file exists for this module test
            if [ -f "software/asm/src/${test_name}.asm" ]; then
              echo "Assembling for: ${test_name}"
              python3 scripts/python/assemble_test.py "${test_name}" --sub-dir modules
            else
              echo "No ASM file found for module test: ${test_name}, skipping assembly."
            fi
          done
          echo "Fixture generation complete."
          echo "Listing generated fixtures directory:"
          ls -R hardware/test/fixtures_generated/

      - name: Execute all Verilog tests
        run: |
          python3 scripts/python/run_tests.py
          # sv2v is handled internally by run_tests.py or by the iverilog step if not sv module

      - name: Upload test reports and logs
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_id }}
          path: |
            test_report_all.txt
            test_run_all.log
            build/sim_run_all_temp/
          retention-days: 7